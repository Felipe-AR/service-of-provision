generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_HOST")
}

model Address {
  id         String  @id @default(uuid())
  street     String
  num        String
  district   String
  complement String?
  city       String
  state      String
  zipCode    String
  userId     String
  User       User?   @relation(fields: [userId], references: [id])
  Order      Order[]

  @@map("addresses")
}

enum Role {
  CUSTOMER
  SERVICE_PROVIDER
  ADMINISTRATOR
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  password        String
  phone           String
  addresses       Address[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  role            Role
  Customer        Customer?
  ServiceProvider ServiceProvider?
  Notification    Notification[]

  @@map("users")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Customer {
  userId  String  @id
  name    String
  surname String
  rg      String
  cpf     String
  gender  Gender
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders  Order[]

  @@map("customers")
}

model Notification {
  id          String    @id
  userId      String
  description String
  readAt      DateTime?
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model CoreBusiness {
  id               String            @id @default(uuid())
  name             String
  description      String?
  serviceProviders ServiceProvider[]

  @@map("core_business")
}

model Speciality {
  id                    String           @id @default(uuid())
  name                  String
  description           String?
  serviceProviderUserId String?
  ServiceProvider       ServiceProvider? @relation(fields: [serviceProviderUserId], references: [userId])

  @@map("specialities")
}

model ServiceProvider {
  userId         String       @id
  companyName    String
  cnpj           String
  coreBusinessId String
  specialities   Speciality[]
  services       Service[]
  orders         Order[]
  coreBusiness   CoreBusiness @relation(fields: [coreBusinessId], references: [id])
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("service_providers")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  Service     Service[]

  @@map("categories")
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

model Service {
  id                    String          @id @default(uuid())
  name                  String
  price                 Float
  categoryId            String
  status                ServiceStatus   @default(ACTIVE)
  orders                Order[]         @relation("orders_services")
  serviceProviderUserId String
  category              Category        @relation(fields: [categoryId], references: [id])
  serviceProvider       ServiceProvider @relation(fields: [serviceProviderUserId], references: [userId])

  @@map("services")
}

enum OrderStatus {
  CREATED
  ACCEPTED
  DENIED
  COMPLETED
}

model Order {
  id                    String           @id @default(uuid())
  customerUserId        String
  serviceProviderUserId String
  selectedAddressId     String
  services              Service[]        @relation("orders_services")
  status                OrderStatus      @default(CREATED)
  price                 Float
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  customer              Customer         @relation(fields: [customerUserId], references: [userId])
  service               ServiceProvider  @relation(fields: [serviceProviderUserId], references: [userId])
  address               Address          @relation(fields: [selectedAddressId], references: [id])
  Classification        Classification[]

  @@map("orders")
}

model Classification {
  id                          String   @default(uuid())
  userClassificationCreatedId String
  userClassificationRatedId   String
  rating                      Int
  description                 String?
  createdAt                   DateTime
  updatedAt                   DateTime
  orderId                     String
  Order                       Order    @relation(fields: [orderId], references: [id])

  @@id([id, userClassificationCreatedId, userClassificationRatedId])
  @@map("classifications")
}
